{"version":3,"sources":["ScoreList/ScoreList.jsx","ScoreInput/ScoreInput.jsx","ScoreCard/ScoreCard.jsx","App.js","serviceWorker.js","index.js"],"names":["ScoreList","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","id","scoreList","map","item","i","className","key","title","React","Component","ScoreInput","_this","handleChangeScore","event","scoreI","val","target","value","player","scores","totalScore","calcTotalScore","console","dir","setState","forceUpdate","state","hasError","values","reduce","b","parseInt","_this2","type","onChange","e","readOnly","PureComponent","ScoreCard","perist","set","data","localStorage","setItem","JSON","stringify","error","get","parse","getItem","clear","points","player1","name","player2","src_ScoreList_ScoreList","src_ScoreInput_ScoreInput","App","src_ScoreCard_ScoreCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff5dba8f.chunk.js","sourcesContent":["import React from 'react';\nimport './ScoreList.scss';\n\nclass ScoreList extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n\n\n  }\n\n\n\n  render() {\n\n    return (\n      <div id=\"scorelist\">\n\n        {this.props.scoreList.map((item, i) => (\n          <div className=\"row input-row\" key={item.title}>\n            <div className=\"col-md\" >{item.title}</div>\n          </div>\n        ))}\n\n        <div className=\"row input-row\" >\n\n          <div className=\"col-md\" >Total</div>\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\n\nexport default ScoreList;\n","import React, { PureComponent } from 'react';\nimport './ScoreInput.scss';\n\nclass ScoreInput extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      player: this.props.player\n    };\n  }\n  calcTotalScore(player) {\n    let scoresArr = Object.values(player.scores);\n    return scoresArr.reduce((a, b) => parseInt(a) + parseInt(b));\n  };\n\n  handleChangeScore = (event, scoreI) => {\n\n    let val = event.target.value;\n    let player = this.props.player;\n    player.scores[scoreI] = val;\n    player.totalScore = this.calcTotalScore(player);\n    console.dir(player);\n    this.setState({ player: player });\n    this.forceUpdate();\n\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n      <section id=\"scoreinput\">\n\n        {this.props.scoreList.map((item, i) => (\n          <div className=\"row\" key={item.title}>\n            <div className=\"col-md\" >\n              <input type=\"number\" value={this.state.value}\n                onChange={(e) => this.handleChangeScore(e, item.title)} />\n            </div>\n\n          </div>\n        ))}\n\n        <div className=\"row\" >\n          <div className=\"col-md\" >\n            <input type=\"text\" value={this.state.player.totalScore} readOnly=\"readOnly\" />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default ScoreInput;","import React from 'react';\nimport './ScoreCard.scss';\nimport ScoreList from '../ScoreList/ScoreList';\nimport ScoreInput from '../ScoreInput/ScoreInput';\n\n\nclass ScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.perist = {\n      set(key, data) {\n        try {\n          localStorage.setItem(key, JSON.stringify(data));\n        } catch (e) {\n          console.error('Error saving to localStorage', e);\n        }\n      },\n      get(key) {\n        try {\n          return JSON.parse(localStorage.getItem(key));\n        } catch (e) {\n          console.error('Error getting data from localStorage', e);\n          return null;\n        }\n      },\n      clear() {\n        localStorage.clear();\n      }\n    }\n\n    //todo add icons and tooltip hints\n    this.scoreList = [\n      {\n        title: 'Blue Card',\n        points: 0\n      },\n      {\n        title: 'Yellow Card',\n        points: 0\n      },\n      {\n        title: 'Purple Card',\n        points: 0\n      },\n      {\n        title: 'Wonders',\n        points: 0\n      },\n      {\n        title: 'Technology Chips',\n        points: 0\n      },\n      {\n        title: 'Money',\n        points: 0\n      },\n      {\n        title: 'Military Points',\n        points: 0\n      }\n\n    ];\n\n    this.state = {\n\n      player1:\n      {\n        name: 'One',\n        totalScore: 0,\n        scores: {}\n      },\n      player2:\n      {\n        name: 'Two',\n        totalScore: 0,\n        scores: {}\n      }\n\n    };\n\n  }\n\n\n\n  render() {\n\n    return (\n      <section id=\"scorecard\">\n        <div className=\"row\" >\n          <div className=\"col-md-4\" >Player Name </div>\n          <div className=\"col-md-4\" ><input type=\"text\" /></div>\n          <div className=\"col-md-4\" ><input type=\"text\" /></div>\n        </div>\n\n        <div className=\"row\" >\n          <div className=\"col-md-4\" >\n            <ScoreList scoreList={this.scoreList}></ScoreList>\n          </div>\n\n          <div className=\"col-md-4\" >\n            <ScoreInput player={this.state.player1} scoreList={this.scoreList}></ScoreInput>\n          </div>\n          <div className=\"col-md-4\" >\n            <ScoreInput player={this.state.player2} scoreList={this.scoreList}></ScoreInput>\n          </div>\n\n        </div>\n\n      </section>\n\n    );\n  }\n\n}\n\n\nexport default ScoreCard;\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './App.css';\nimport ScoreCard from './ScoreCard/ScoreCard';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Seven Wonders Duel Scorecard </h1>\n      </header>\n      <ScoreCard></ScoreCard>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}