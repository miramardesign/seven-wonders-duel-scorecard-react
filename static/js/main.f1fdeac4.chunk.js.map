{"version":3,"sources":["ScoreList/ScoreList.jsx","ScoreInput/ScoreInput.jsx","ScoreCard/ScoreCard.jsx","App.js","serviceWorker.js","index.js"],"names":["ScoreList","react_default","a","createElement","id","className","this","props","scoreList","map","item","i","key","title","cls","React","Component","ScoreInput","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeScore","event","scoreI","val","target","value","player","scores","totalScore","calcTotalScore","console","dir","setState","forceUpdate","state","hasError","values","reduce","b","parseInt","_this2","type","placeholder","onChange","e","readOnly","PureComponent","ScoreCard","perist","set","data","localStorage","setItem","JSON","stringify","error","get","parse","getItem","clear","points","player1","name","player2","src_ScoreList_ScoreList","src_ScoreInput_ScoreInput","App","src_ScoreCard_ScoreCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1fdeac4.chunk.js","sourcesContent":["import React from 'react';\nimport './ScoreList.scss';\n\nclass ScoreList extends React.Component {\n\n  render() {\n\n    return (\n      <div id=\"scorelist\">\n\n        <div className=\"row input-row\" >\n         \n             <label className=\"col-md col-form-label\">\n              <span className=\"black i-player\"></span> Player Name \n             </label>\n         \n        </div>\n\n        {this.props.scoreList.map((item, i) => (\n          <div className=\"row input-row\" key={item.title}>\n\n            <label className=\"col-md col-form-label\">\n            <span className={item.cls}></span> {item.title}\n            </label>\n\n          </div>\n        ))}\n\n        <div className=\"row\" >\n\n          <label className=\"col-md col-form-label\"> <span className=\"i-sigma\"></span> Total\n          </label>\n\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\nexport default ScoreList;\n","import React, { PureComponent } from 'react';\nimport './ScoreInput.scss';\n\nclass ScoreInput extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      player: this.props.player\n    };\n  }\n  calcTotalScore(player) {\n    let scoresArr = Object.values(player.scores);\n    return scoresArr.reduce((a, b) => parseInt(a) + parseInt(b));\n  };\n\n  handleChangeScore = (event, scoreI) => {\n\n    let val = event.target.value;\n    let player = this.props.player;\n    player.scores[scoreI] = val;\n    player.totalScore = this.calcTotalScore(player);\n    console.dir(player);\n    this.setState({ player: player });\n    this.forceUpdate();\n\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n      <section id=\"scoreinput\">\n          <div className=\"row\" >\n            <div className=\"col-md\" >\n               <input type=\"text\" className=\"form-control\" placeholder=\"Player Name\" />\n               </div>\n          </div>\n\n        {this.props.scoreList.map((item, i) => (\n          <div className=\"row\" key={item.title}>\n            <div className=\"col-md\" >\n              <input type=\"number\"  className=\"form-control\" value={this.state.value}\n                onChange={(e) => this.handleChangeScore(e, item.title)} />\n            </div>\n\n          </div>\n        ))}\n\n        <div className=\"row\" >\n          <div className=\"col-md\" >\n            <input type=\"text\" className=\"form-control\" value={this.state.player.totalScore} readOnly=\"readOnly\" />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default ScoreInput;","import React from 'react';\nimport './ScoreCard.scss';\nimport ScoreList from '../ScoreList/ScoreList';\nimport ScoreInput from '../ScoreInput/ScoreInput';\n\n\nclass ScoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.perist = {\n      set(key, data) {\n        try {\n          localStorage.setItem(key, JSON.stringify(data));\n        } catch (e) {\n          console.error('Error saving to localStorage', e);\n        }\n      },\n      get(key) {\n        try {\n          return JSON.parse(localStorage.getItem(key));\n        } catch (e) {\n          console.error('Error getting data from localStorage', e);\n          return null;\n        }\n      },\n      clear() {\n        localStorage.clear();\n      }\n    }\n\n    //todo add icons and tooltip hints\n    this.scoreList = [\n      {\n        title: 'Blue Cards',\n        points: 0,\n        cls: 'blue i-card'\n      },\n      {\n        title: 'Yellow Cards',\n        points: 0,\n        cls: 'yellow i-card'\n      },\n      {\n        title: 'Purple Cards',\n        points: 0,\n        cls: 'purple i-card'\n      },\n      {\n        title: 'Wonders',\n        points: 0,\n        cls: 'gold i-pyramid'\n      },\n      {\n        title: 'Technology Chips',\n        points: 0,\n        cls: 'green i-chip'\n      },\n      {\n        title: 'Money',\n        points: 0,\n        cls: 'gold i-chip'\n      },\n      {\n        title: 'Military Points',\n        points: 0,\n        cls: 'red i-shield'\n      }\n\n    ];\n\n    this.state = {\n\n      player1:\n      {\n        name: 'One',\n        totalScore: 0,\n        scores: {}\n      },\n      player2:\n      {\n        name: 'Two',\n        totalScore: 0,\n        scores: {}\n      }\n\n    };\n\n  }\n\n  render() {\n\n    return (\n      <section id=\"scorecard\" className=\"form-group \" >\n\n\n        <div className=\"row\" >\n          <div className=\"col-md-2\" >\n            <ScoreList scoreList={this.scoreList}></ScoreList>\n          </div>\n\n          <div className=\"col-md-2\" >\n            <ScoreInput player={this.state.player1} scoreList={this.scoreList}></ScoreInput>\n          </div>\n          <div className=\"col-md-2\" >\n            <ScoreInput player={this.state.player2} scoreList={this.scoreList}></ScoreInput>\n          </div>\n\n        </div>\n\n      </section>\n\n    );\n  }\n\n}\n\n\nexport default ScoreCard;\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './App.css';\nimport ScoreCard from './ScoreCard/ScoreCard';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Seven Wonders Duel Scorecard </h1>\n      </header>\n      <ScoreCard></ScoreCard>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}